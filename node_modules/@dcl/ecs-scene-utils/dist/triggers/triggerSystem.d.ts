/// <reference types="dcl" />
/**
 *
 * @typedef {Object} TriggerData - Object with data for a NPCTriggerComponent
 * @property {number} layer  layer of the Trigger, useful to discriminate between trigger events. You can set multiple layers by using a | symbol.
 * @property {number} triggeredByLayer against which layers to check collisions
 * @property {(entity: Entity) => void } onTriggerEnter callback when an entity of a valid layer enters the trigger area
 * @property {(entity: Entity) => void} onTriggerExit callback when an entity of a valid layer leaves the trigger area
 * @property {() => void} onCameraEnter callback when the player enters the trigger area
 * @property {() => void} onCameraExit callback when the player leaves the trigger area
 * @property {boolean} enableDebug when true makes the trigger area visible for debug purposes.
 */
export declare type TriggerData = {
    layer?: number;
    triggeredByLayer?: number;
    onTriggerEnter?: (entity: Entity) => void;
    onTriggerExit?: (entity: Entity) => void;
    onCameraEnter?: () => void;
    onCameraExit?: () => void;
    enableDebug?: boolean;
};
export declare class TriggerSystem implements ISystem {
    private static _instance;
    static get instance(): TriggerSystem;
    private _triggers;
    private _cameraTriggerWrapper;
    private _componentGroup;
    private constructor();
    static createAndAddToEngine(): TriggerSystem;
    /**
     * set a custom trigger's shape for the camera
     * @param {TriggerBoxShape | TriggerSphereShape} shape custom trigger's shape
     */
    setCameraTriggerShape(shape: TriggerBoxShape | TriggerSphereShape): void;
    update(): void;
    private shouldWrapTriggerEntity;
    private wrapTriggerEntity;
    private static removeTriggerFromSystem;
    private static disengageCollision;
    private static engageCollision;
    private checkCollisionAgainstCamera;
    private checkCollisionAgainstOtherTriggers;
    private static canTriggersCollide;
    private static areColliding;
    private static areCollidingAABB;
    private static areCollidingSphere;
    private static areCollidingAABBSphere;
    private static getBoxShapeValues;
}
export declare class TriggerComponent {
    /**
     * Is the trigger enabled? If false, the associated functions aren't triggered.
     */
    enabled: boolean;
    /**
     * shape of the collider
     */
    shape: TriggerBoxShape | TriggerSphereShape;
    /**
     * bit layer of the Tigger (usefull to discriminate between trigger events)
     */
    layer: number;
    /**
     * against which layer are we going to check trigger's collisions
     */
    triggeredByLayer: number;
    /**
     * callback when trigger is entered
     */
    onTriggerEnter?: (entity: Entity) => void;
    /**
     * callback when trigger is exit
     */
    onTriggerExit?: (entity: Entity) => void;
    /**
     * callback when trigger is entered
     */
    onCameraEnter?: () => void;
    /**
     * callback when trigger is exit
     */
    onCameraExit?: () => void;
    /**
     * get if debug is enabled
     */
    get debugEnabled(): boolean;
    private _debugEnabled;
    /**
     *
     * @param {TriggerBoxShape | TriggerSphereShape} shape shape of the triggering collider area
     * @param {TriggerData} data An object with additional parameters for the trigger component
     */
    constructor(shape: TriggerBoxShape | TriggerSphereShape, data?: TriggerData);
}
/**
 * Define a box-shaped area for using on a TriggerComponent
 * @param {Vector3} [size=2] The scale of the box area. By default 2x2x2
 * @param {Vector3} [position=Vector3.Zero()] The offset from the position of the entity that owns the TriggerComponent
 */
export declare class TriggerBoxShape {
    size: Vector3;
    position: Vector3;
    constructor(size?: Vector3, position?: Vector3);
}
/**
 * Define a sphere-shaped area for using on a TriggerComponent
 * @param {number} [radius=2] The radius of the sphere area. By default 2
 * @param {Vector3} [position=Vector3.Zero()] The offset from the position of the entity that owns the TriggerComponent
 */
export declare class TriggerSphereShape {
    radius: number;
    position: Vector3;
    constructor(radius?: number, position?: Vector3);
}
