/// <reference types="dcl" />
/**
 * Maps a value from one range of values to its equivalent, scaled in proportion to another range of values, using maximum and minimum.
 *
 * @param {number} value input number
 * @param {number} min1 Minimum value in the range of the input.
 * @param {number} max1 Maximum value in the range of the input.
 * @param {number} min2 Minimum value in the range of the output.
 * @param {number} max2 Maximum value in the range of the output.
 * @return {number} The resulting mapped value between the new min and max
 *
 */
export declare function map(value: number, min1: number, max1: number, min2: number, max2: number): number;
/**
 * Clamps a value so that it doesn't exceed a minimum or a maximum value.
 *
 * @param {number} value input number
 * @param {number} min Minimum output value.
 * @param {number} max Maximum output value.
 * @return {number} The resulting mapped value between the min and max
 *
 */
export declare function clamp(value: number, min: number, max: number): number;
/**
 * Returns the position of an entity that is a child of other entities, relative to the scene instead of relative to the parent. Returns a Vector3.
 *
 * @param {Entity} entity Entity to calculate position
 * @return {Vector3} The Entity's global position in reference to the scene's origin
 *
 */
export declare function getEntityWorldPosition(entity: IEntity): Vector3;
/**
 * Returns the position of an entity that is a child of other entities, relative to the scene instead of relative to the parent. Returns a Vector3.
 *
 * @param {Entity} entity Entity to calculate position
 * @return {Quaternion} The Entity's global rotation in reference to the scene's origin
 *
 */
export declare function getEntityWorldRotation(entity: IEntity): Quaternion;
