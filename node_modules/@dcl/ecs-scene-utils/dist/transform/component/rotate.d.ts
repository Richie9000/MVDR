/// <reference types="dcl" />
import { ITransformComponent } from './itransformcomponent';
import { InterpolationType } from '../math/interpolation';
/**
 * Component to rotate entity from one rotation (start) to another (end) in an amount of time
 */
export declare class RotateTransformComponent implements ITransformComponent {
    private start;
    private end;
    private speed;
    private normalizedTime;
    private interpolationType;
    private lerpTime;
    onFinishCallback?: () => void;
    /**
     * Create a RotateTransformComponent instance to add as a component to a Entity
     * @param {ReadOnlyQuaternion} start starting rotation
     * @param {ReadOnlyQuaternion} end ending rotation
     * @param {number} duration duration (in seconds) of start to end rotation
     * @param {() => void} onFinishCallback called when rotation ends
     * @param {InterpolationType} interpolationType type of interpolation to be used (default: LINEAR)
     */
    constructor(start: ReadOnlyQuaternion, end: ReadOnlyQuaternion, duration: number, onFinishCallback?: () => void, interpolationType?: InterpolationType);
    update(dt: number): void;
    hasFinished(): boolean;
    assignValueToTransform(transform: Transform): void;
}
