/// <reference types="dcl" />
export declare class ActionsSequenceSystem implements ISystem {
    private beginSequenceNode;
    private currentSequenceNode;
    private running;
    private started;
    private onFinishCallback?;
    constructor(sequenceBuilt?: ActionsSequenceSystem.SequenceBuilder);
    startSequence(sequenceBuilt: ActionsSequenceSystem.SequenceBuilder): void;
    setOnFinishCallback(onFinishCallback: () => void): void;
    isRunning(): boolean;
    stop(): void;
    resume(): void;
    reset(): void;
    getRunningAction(): ActionsSequenceSystem.IAction | null;
    update(dt: number): void;
}
export declare namespace ActionsSequenceSystem {
    interface IAction {
        onStart(): void;
        update(dt: number): void;
        onFinish(): void;
        hasFinished: boolean;
    }
    class SequenceBuilder {
        private currentSequenceNode;
        beginSequenceNode: SequenceNode | null;
        private whileNodeStack;
        then(action: ActionsSequenceSystem.IAction): SequenceBuilder;
        if(condition: () => boolean): SequenceBuilder;
        else(): SequenceBuilder;
        endIf(): SequenceBuilder;
        while(condition: () => boolean): SequenceBuilder;
        endWhile(): SequenceBuilder;
        breakWhile(): SequenceBuilder;
    }
}
declare class SequenceNode {
    action: ActionsSequenceSystem.IAction | null;
    next: SequenceNode | null;
    then(next: SequenceNode): SequenceNode;
    onStart(): void;
    update(dt: number): void;
    onFinish(): void;
    hasFinish(): boolean;
    getSequence(): SequenceNode;
}
export {};
